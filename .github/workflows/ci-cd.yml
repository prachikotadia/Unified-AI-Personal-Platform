name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ==================== BUILD & TEST ====================
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: Frontend
            working-directory: ./
            package-manager: npm
          - name: Backend
            working-directory: ./backend
            package-manager: pip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (Frontend)
        if: matrix.name == 'Frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python (Backend)
        if: matrix.name == 'Backend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies (Frontend)
        if: matrix.name == 'Frontend'
        working-directory: ./
        run: |
          npm ci
          npm audit fix --audit-level=moderate

      - name: Install dependencies (Backend)
        if: matrix.name == 'Backend'
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy

      - name: Lint check (Frontend)
        if: matrix.name == 'Frontend'
        working-directory: ./
        run: |
          npm run lint
          npm run type-check

      - name: Lint check (Backend)
        if: matrix.name == 'Backend'
        working-directory: ./backend
        run: |
          black --check --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          mypy . --ignore-missing-imports

      - name: Run tests (Frontend)
        if: matrix.name == 'Frontend'
        working-directory: ./
        run: |
          npm run test:coverage
          npm run test:e2e:ci

      - name: Run tests (Backend)
        if: matrix.name == 'Backend'
        working-directory: ./backend
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80
          pytest --cov=app --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload coverage reports (Frontend)
        if: matrix.name == 'Frontend'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ==================== SECURITY SCAN ====================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ==================== BUILD DOCKER IMAGES ====================
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push'
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Extract metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==================== STAGING DEPLOYMENT ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render (Staging)
        uses: johnbeynon/render-deploy-action@v1.0.0
        with:
          service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Wait for deployment
        run: |
          echo "Waiting for staging deployment to be ready..."
          sleep 60

      - name: Run smoke tests (Staging)
        run: |
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1
          echo "Staging deployment successful!"

      - name: Run E2E tests (Staging)
        uses: cypress-io/github-action@v6
        with:
          config: baseUrl=${{ secrets.STAGING_URL }}
          browser: chrome
          headless: true
          record: false
        env:
          CYPRESS_baseUrl: ${{ secrets.STAGING_URL }}

      - name: Notify Slack (Staging)
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Staging deployment ${{ job.status }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==================== PRODUCTION DEPLOYMENT ====================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to AWS ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster omnilife-cluster \
            --service omnilife-service \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          echo "Waiting for production deployment to complete..."
          aws ecs wait services-stable \
            --cluster omnilife-cluster \
            --services omnilife-service

      - name: Run smoke tests (Production)
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          echo "Production deployment successful!"

      - name: Run load tests
        run: |
          # Run k6 load tests
          k6 run load-tests/smoke-test.js

      - name: Update DNS (if needed)
        run: |
          # Update CloudFront distribution
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Notify Slack (Production)
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Production deployment ${{ job.status }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==================== MONITORING & ALERTS ====================
  monitoring:
    name: Monitoring & Alerts
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: Setup monitoring
        run: |
          echo "Setting up monitoring and alerts..."
          # Configure Prometheus alerts
          # Setup Grafana dashboards
          # Configure PagerDuty/Slack alerts

      - name: Health check
        run: |
          # Run comprehensive health checks
          curl -f ${{ secrets.PRODUCTION_URL }}/health
          curl -f ${{ secrets.STAGING_URL }}/health

  # ==================== ROLLBACK (MANUAL) ====================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback == 'true'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Rollback ECS service
        run: |
          # Rollback to previous deployment
          aws ecs update-service \
            --cluster omnilife-cluster \
            --service omnilife-service \
            --task-definition omnilife-task-definition:$(($(aws ecs describe-task-definition --task-definition omnilife-task-definition --query 'taskDefinition.revision' --output text) - 1))

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Production rollback completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
