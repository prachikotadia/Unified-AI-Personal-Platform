# ==================== KUBERNETES DEPLOYMENTS ====================
# Application deployments with resource limits and health checks

# ==================== FRONTEND DEPLOYMENT ====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: omnilife-frontend
  namespace: omnilife
spec:
  replicas: 3
  selector:
    matchLabels:
      app: omnilife-frontend
  template:
    metadata:
      labels:
        app: omnilife-frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/your-username/omnilife-frontend:latest
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: NODE_ENV
        - name: VITE_API_URL
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: VITE_API_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
# ==================== BACKEND DEPLOYMENT ====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: omnilife-backend
  namespace: omnilife
spec:
  replicas: 3
  selector:
    matchLabels:
      app: omnilife-backend
  template:
    metadata:
      labels:
        app: omnilife-backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/your-username/omnilife-backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: ENVIRONMENT
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: REDIS_URL
        - name: ELASTICSEARCH_URL
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: ELASTICSEARCH_URL
        - name: FORCE_SQLITE
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: FORCE_SQLITE
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: omnilife-secrets
              key: SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: omnilife-secrets
              key: POSTGRES_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: backend-data
          mountPath: /app/data
        - name: backend-logs
          mountPath: /app/logs
        - name: backend-uploads
          mountPath: /app/uploads
      volumes:
      - name: backend-data
        persistentVolumeClaim:
          claimName: omnilife-backend-data-pvc
      - name: backend-logs
        emptyDir: {}
      - name: backend-uploads
        emptyDir: {}

---
# ==================== POSTGRES DEPLOYMENT ====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: omnilife-postgres
  namespace: omnilife
spec:
  replicas: 1
  selector:
    matchLabels:
      app: omnilife-postgres
  template:
    metadata:
      labels:
        app: omnilife-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: omnilife-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: omnilife-secrets
              key: POSTGRES_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: omnilife-postgres-pvc

---
# ==================== REDIS DEPLOYMENT ====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: omnilife-redis
  namespace: omnilife
spec:
  replicas: 1
  selector:
    matchLabels:
      app: omnilife-redis
  template:
    metadata:
      labels:
        app: omnilife-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: omnilife-redis-pvc

---
# ==================== ELASTICSEARCH DEPLOYMENT ====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: omnilife-elasticsearch
  namespace: omnilife
spec:
  replicas: 1
  selector:
    matchLabels:
      app: omnilife-elasticsearch
  template:
    metadata:
      labels:
        app: omnilife-elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        ports:
        - containerPort: 9200
        env:
        - name: discovery.type
          value: "single-node"
        - name: xpack.security.enabled
          value: "false"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
      volumes:
      - name: elasticsearch-data
        persistentVolumeClaim:
          claimName: omnilife-elasticsearch-pvc

---
# ==================== PROMETHEUS DEPLOYMENT ====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: omnilife-prometheus
  namespace: omnilife
spec:
  replicas: 1
  selector:
    matchLabels:
      app: omnilife-prometheus
  template:
    metadata:
      labels:
        app: omnilife-prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=200h
        - --web.enable-lifecycle
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: omnilife-prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: omnilife-prometheus-pvc

---
# ==================== GRAFANA DEPLOYMENT ====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: omnilife-grafana
  namespace: omnilife
spec:
  replicas: 1
  selector:
    matchLabels:
      app: omnilife-grafana
  template:
    metadata:
      labels:
        app: omnilife-grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: omnilife-secrets
              key: GRAFANA_ADMIN_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: omnilife-grafana-pvc
      - name: grafana-dashboards
        configMap:
          name: omnilife-grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: omnilife-grafana-datasources
